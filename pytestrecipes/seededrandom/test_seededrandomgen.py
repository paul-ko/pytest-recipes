"""
Demonstrates randomized but reproducible dynamic test generation.

This approach uses a `random.Random` instance to parametrize a test function.
The instance is explicitly seeded from one of three sources.

1. If the user passes a `--rand-seed` argument, that value is used.
2. If the user passed a `--reuse-rand-argument`, the previously used seed is
   reused.
3. Otherwise, the system time is used.

The seed used is written to the pytest cache in the "rand_seed" key, which
allows it be to be captured and reused.

This solution for capturing autogenerated seeds might not work if the tests are
running in certain circumstances, such as in an ephemeral container used in a
CICD system.  In that case, you might explore logging the seed and using
pytest's log capture capabilities.

The use of `random.Random` means this approach is subject to the limitations of
that class's random number generation.

This approach is applicable for fuzz testing, or cases where there are an
effectively infinite number of potential test cases of roughly equal value and
priority.  A more full-fledged approach likely would expose the number of tests
to run as a command-line argument, keeping in mind that test collection
execution time and memory requirements scale with the number of tests to
generate, and can bring the host to its knees in extreme cases.
"""
from random import Random
import time

from _pytest.python import Config, Metafunc

from pytestrecipes.config import CommandLineArgumentError


def test_not_divisible_by_50(
        val: int):
    """ A test that should fail on ~20 of the 1000 tests each run. """

    assert val % 50, f'argument {val} is divisible by 50'


def pytest_generate_tests(
        metafunc: Metafunc):

    if metafunc.definition.name == test_not_divisible_by_50.__name__:
        if 'val' in metafunc.fixturenames:
            rand_seed = _determine_rng_seed(metafunc.config)
            metafunc.config.cache.set('randseed', rand_seed)
            rng = Random(rand_seed)
            test_values = [rng.randint(1, 1000*1000) for _ in range(1000)]
            metafunc.parametrize('val', test_values)


def _determine_rng_seed(
        config: Config) \
        -> float:
    """
    Use the command-line arguments to determine the seed to use for RNG.

    :param config: the config object to retrieve arguments from
    :return: the seed to use
    :raises CommandLineArgumentError: if inconsistent or unfulfillable arguments
    are encountered
    """

    rand_seed_arg = config.getoption('rand_seed')
    reuse_rand_seed = config.getoption('reuse_rand_seed')
    if rand_seed_arg is not None:
        if reuse_rand_seed:
            raise CommandLineArgumentError(
                '--rand-seed and --reuse-rand-seed cannot both be specified.')
        else:
            rand_seed = rand_seed_arg

    else:
        if config.getoption('reuse_rand_seed'):
            previous_seed = config.cache.get('randseed', None)
            if previous_seed is None:
                raise CommandLineArgumentError(
                    '--reuse-rand-seed was specified, but there is no randseed '
                    'in the pytest cache.')
            else:
                rand_seed = previous_seed

        else:
            rand_seed = time.time()

    return rand_seed
